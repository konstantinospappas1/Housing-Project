import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import numpy as np

# === 1. Φόρτωση δεδομένων ===
df = pd.read_csv('Housing.csv', encoding='utf-8')
df = df.dropna()
print(f"Δεδομένα: {len(df)} γραμμές")

# === 2. Διαχωρισμός X και y ===
X = df.drop('price', axis=1)
y = df['price']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# === 3. OneHotEncoder για κατηγορικές ===
categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()
encoder = ColumnTransformer(
    [('cat', OneHotEncoder(drop='first', sparse_output=False), categorical_cols)],
    remainder='passthrough'
)

X_train = encoder.fit_transform(X_train)
X_test = encoder.transform(X_test)
print(f"Features μετά το encoding: {X_train.shape[1]}")

# === 4. Ορισμός μοντέλου ===
xgb = XGBRegressor(random_state=42, n_jobs=-1)

# === 5. Λεπτομερές Grid ===
param_grid = {
    'n_estimators': [5, 10, 15],
    'max_depth': [2, 3, 4, 5],
    'learning_rate': [ 0.1, 0.2, 0.3,0.4],
    'subsample': [0.4, 0.6, 0.8],
    'colsample_bytree': [ 0.6, 0.8, 0.9],
    'min_child_weight': [1, 3, 5]
}

grid_search = GridSearchCV(
    estimator=xgb,
    param_grid=param_grid,
    scoring='r2',
    cv=3,
    n_jobs=-1,
    verbose=1
)

print("\nΞεκινά το Grid Search...")
grid_search.fit(X_train, y_train)

# === 6. Εξαγωγή όλων των αποτελεσμάτων ===
results = pd.DataFrame(grid_search.cv_results_)

# === 7. Υπολογισμός Test R² και Gap ===
best_rows = []
for i, params in enumerate(results['params']):
    model = XGBRegressor(random_state=42, n_jobs=-1, **params)
    model.fit(X_train, y_train)
    y_pred_train = model.predict(X_train)
    y_pred_test = model.predict(X_test)
    train_r2 = r2_score(y_train, y_pred_train)
    test_r2 = r2_score(y_test, y_pred_test)
    gap = abs(train_r2 - test_r2)
    best_rows.append((params, train_r2, test_r2, gap))

df_eval = pd.DataFrame(best_rows, columns=['Params', 'Train_R2', 'Test_R2', 'Gap'])
df_eval['Score'] = df_eval['Test_R2'] - df_eval['Gap']

# === 8. Επιλογή του βέλτιστου μοντέλου με custom metric ===
best_row = df_eval.loc[df_eval['Score'].idxmax()]
best_params = best_row['Params']

print("\n" + "="*60)
print(" ΒΕΛΤΙΣΤΕΣ ΠΑΡΑΜΕΤΡΟΙ (με βάση μικρό Gap και μεγάλο Test R²)")
print("="*60)
print(best_params)
print(f"Train R²: {best_row['Train_R2']:.4f}")
print(f"Test R²:  {best_row['Test_R2']:.4f}")
print(f"Gap:       {best_row['Gap']:.4f}")

# === 9. Εκπαίδευση τελικού μοντέλου ===
best_model = XGBRegressor(random_state=42, n_jobs=-1, **best_params)
best_model.fit(X_train, y_train)

y_pred_train = best_model.predict(X_train)
y_pred_test = best_model.predict(X_test)

# === 10. Αξιολόγηση ===
print("\n" + "="*50)
print(" ΤΕΛΙΚΑ ΑΠΟΤΕΛΕΣΜΑΤΑ ΤΟΥ ΕΠΙΛΕΓΜΕΝΟΥ ΜΟΝΤΕΛΟΥ")
print("="*50)
print(f"Train MAE: {mean_absolute_error(y_train, y_pred_train):,.2f}")
print(f"Train R²:  {r2_score(y_train, y_pred_train):.4f}")
print(f"Test MAE:  {mean_absolute_error(y_test, y_pred_test):,.2f}")
print(f"Test R²:   {r2_score(y_test, y_pred_test):.4f}")
print(f"Gap R²:    {abs(r2_score(y_train, y_pred_train) - r2_score(y_test, y_pred_test)):.4f}")

# === 11. Παράδειγμα προβλέψεων ===
df_compare = pd.DataFrame({
    'Actual': y_test.values,
    'Predicted': y_pred_test
})
print("\nΠαράδειγμα προβλέψεων:")
print(df_compare.head(10))
